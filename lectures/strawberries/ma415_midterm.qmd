---
title: "ma415_midterm"
format: html
format: 
  html:
    embed-resources: true
editor: visual
---

notes from lecture on midterm

-   code should be easy to understand and minimal

-   show curiosity

-   look at relationships btwn variables

-   label axes on charts/graphs

-   use vajinder's code for the chemicals

    -   review how to use kable, kable extra

-   write our own functions, including drop_one_value_col and shift_loc

-   looking for structure of document (headings, subheadings, visualizations, etc)

# Midterm Report

## Preliminaries

```{r}
#| label: load libraries
#| warning: false
#| message: false

library(knitr)  
library(kableExtra)
library(tidyverse)
library(stringr)
library(ggplot2)
```

```{r}
#| label: read data - glimpse 

strawberry <- read_csv("strawb_mar6.csv", col_names = TRUE)

source("my_functions.R")
```

## Data Cleaning

```{r}
strawb <- strawberry |> drop_one_value_col()
```

```{r}
# splitting into data frame by census or survey
census_df <- strawb |> filter(Program == 'CENSUS')
survey_df <- strawb |> filter(Program == 'SURVEY')

# dropping columns with only one value
census_df <- census_df |> drop_one_value_col()
survey_df <- survey_df |> drop_one_value_col()
```

```{r}
# splitting census data frame by commodity
census_income <- census_df |> filter(Commodity == 'INCOME, NET CASH FARM')
census_strawb <- census_df |> filter(Commodity == 'STRAWBERRIES')

# dropping columns with only one value
census_income <- census_income |> drop_one_value_col()
census_strawb <- census_strawb |> drop_one_value_col()
```

Now working with `census_income` to make it more readable and useful for data analysis.

```{r}
census_income <- census_income |> mutate(`Data Item` = str_replace(`Data Item`, "INCOME, NET CASH FARM, OF ", ""))

census_income <- census_income |> separate_wider_delim(
  cols = `Data Item`,
  delim = ' - ',
  names = c('Utilization', 'Aspect')
)
```

```{r}
census_income <- census_income |> mutate(`Aspect` = str_replace(`Aspect`, ", MEASURED IN \\$", ""))
```

```{r}
vals = c('NET GAIN: ', 'NET LOSS: ', 'AREA OPERATED: ', 'ECONOMIC CLASS: ', 'FARM SALES: ', 'NAICS CLASSIFICATION: ')

for (i in 1:length(vals)) {
  census_income <- census_income |> mutate(`Domain Category` = str_replace(`Domain Category`, vals[i], ""))
}
```

```{r}
census_income <- census_income |> filter(Domain != 'TOTAL')
```

Now working with `census_strawb` to make it more readable and useful for data analysis.

```{r}
census_strawb <- census_strawb |> separate_wider_delim(
  cols = `Data Item`,
  delim = ' - ',
  names = c('Utilization', 'Aspect')
)
```

```{r}
census_strawb <- census_strawb |> rename(Production = Utilization)
```

```{r}
census_strawb <- census_strawb |> separate_wider_delim(
  cols = Production,
  delim = ', ',
  names = c('Commodity', 'Production', 'Marketing Channel'),
  too_few = 'align_start'
)
```

```{r}
# since removing 'organic' in the columns, creating another 
# data frame to clarify it's organic strawberry
census_strawb_organic <- census_strawb
census_strawb_organic <- census_strawb_organic |> drop_one_value_col()
```

```{r}
census_strawb_organic <- census_strawb_organic |> rename(Statistic = Aspect)
census_strawb_organic <- census_strawb_organic |> separate_wider_delim(
  cols = Statistic,
  delim = ', ',
  names = c('Statistic', 'Unit'),
  too_few = 'align_start'
)
```

```{r}
census_strawb_organic <- census_strawb_organic |> mutate(Unit = str_replace(Unit, "MEASURED IN ", ""))

census_strawb_organic <- census_strawb_organic |> mutate(Statistic = str_replace(Statistic, "ACRES HARVESTED", "AREA HARVESTED"))

census_strawb_organic <- census_strawb_organic |> 
  mutate(Unit = if_else(
    is.na(Unit) & Statistic == "AREA HARVESTED", 
    "ACRES", 
    Unit
  ))
```

Separating `census_strawb_organic` into Marketing Channels with and without "NA" values.

```{r}
census_strawb_organic_totals <- census_strawb_organic |> filter(is.na(`Marketing Channel`))

census_strawb_organic_sep <- census_strawb_organic |> filter(!is.na(`Marketing Channel`))

census_strawb_organic_totals <- census_strawb_organic_totals |> drop_one_value_col()
```

Now working with `survey_df` to clean it.

```{r}
survey_df <- survey_df |> separate_wider_delim(
  cols = `Data Item`,
  delim = ' - ',
  names = c('Marketing Channel', 'Statistic')
)
```

```{r}
survey_df <- survey_df |> mutate(`Marketing Channel` = str_replace(`Marketing Channel`, "STRAWBERRIES, ", ""))

survey_df <- survey_df |> mutate(`Marketing Channel` = str_replace(`Marketing Channel`, "STRAWBERRIES", NA_character_))
```

```{r}
survey_df <- survey_df |> separate_wider_delim(
  cols = Statistic,
  delim = ', ',
  names = c('Statistic', 'Unit'),
  too_few = 'align_start',
  too_many = 'drop'
)
```

```{r}
survey_df <- survey_df |> mutate(Unit = str_replace(Unit, "MEASURED IN ", ""))
```

```{r}
vals = c('CHEMICAL, FUNGICIDE: ', "CHEMICAL, INSECTICIDE: ", "CHEMICAL, OTHER: ", "CHEMICAL, HERBICIDE: ", "FERTILIZER: ")

for (i in 1:length(vals)) {
  survey_df <- survey_df |> mutate(`Domain Category` = str_replace(`Domain Category`, vals[i], ""))
}
```

```{r}
survey_df <- survey_df |> mutate(Value = str_replace(Value, "(NA)", NA_character_))
```

```{r}
survey_df <- survey_df |> rename(`Chemical Type` = Domain)
survey_df <- survey_df |> mutate(`Chemical Type` = str_replace(`Chemical Type`, "CHEMICAL, ", ""))
```

```{r}
survey_df <- survey_df |> mutate(`Chemical Type` = str_replace(`Chemical Type`, "TOTAL", NA_character_))

survey_df <- survey_df |> rename(Chemical = `Domain Category`)
survey_df <- survey_df |> mutate(`Chemical` = str_replace(`Chemical`, "NOT SPECIFIED", NA_character_))
```

```{r}
# splitting into two dfs: one with chemical info and one without
survey_no_chems <- survey_df |> filter(is.na(`Chemical Type`) & is.na(Chemical))

survey_chemicals <- survey_df |> filter(!is.na(`Chemical Type`) & !is.na(Chemical))

survey_chemicals <- survey_chemicals |> drop_one_value_col()
survey_no_chems <- survey_no_chems |> drop_one_value_col()
```

```{r}
survey_chemicals <- survey_chemicals |> mutate(Value = str_replace(Value, "(D)", NA_character_))

survey_no_chems <- survey_no_chems |> mutate(Value = str_replace(Value, "(D)", NA_character_))
```

## Visualizations

```{r}
# where strawberries are grown
acres <- census_strawb_organic_totals |> 
  filter(Unit == "ACRES") |> 
  mutate(
    Value = gsub("[\\$,]", "", Value),
    Value = as.numeric(Value),
    Value = replace_na(Value, 0),
    Label = ifelse(Value == 0,"NA", Value)
  ) |>
  arrange(desc(Value))
```

```{r}
ggplot(acres, aes(State, Value)) +
  geom_col(fill = "lightblue") +
  geom_text(aes(label = Label), 
            vjust = -0.5, 
            color = "black", 
            size = 2.5) + 
  labs(
    title = "Acres of Strawberries Planted by State",
    x = "State",
    y = "Acres"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1), plot.title = element_text(hjust = 0.5)) +
  scale_y_continuous(
    limits = c(0, 5000)
  )
```

The above visualization shows how many acres of strawberries have been planted and in which states. The majority of strawberries are grown in California, with 4,228 acres grown. Florida has grown the next largest amount of strawberries, with 704 acres grown. However, this is still a large gap between acres grown, showing that California is the largest strawberry grower out of the states shown. The rest of the plotted states do not have nearly as many acres planted as California and Florida. Rhode Island did not have any data on how many acres of strawberries were planted, so it was visualized with a label of "NA".

```{r}
# amount of chemicals used, categorized
chemical_counts <- survey_chemicals |> count(`Chemical Type`)
chemical_counts <- chemical_counts |> mutate(n = as.numeric(n))

ggplot(chemical_counts, aes(`Chemical Type`, n)) +
  geom_bar(stat = "identity", fill = 'pink') +
  geom_text(aes(label = n), 
            vjust = -0.5, 
            color = "black", 
            size = 2.5) +
  labs(
    title = "Chemicals Used on Strawberries",
    x = "Chemical Type",
    y = "Count"
  ) + 
  theme_minimal() + 
  theme(plot.title = element_text(hjust = 0.5))
```

The above visualization shows the
